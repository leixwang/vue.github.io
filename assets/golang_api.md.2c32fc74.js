import{_ as t,o as d,c as a,U as e}from"./chunks/framework.92bf3306.js";const p=JSON.parse('{"title":"Panda","description":"","frontmatter":{},"headers":[],"relativePath":"golang/api.md","filePath":"golang/api.md","lastUpdated":1689738962000}'),r={name:"golang/api.md"},i=e('<h1 id="panda" tabindex="-1">Panda <a class="header-anchor" href="#panda" aria-label="Permalink to &quot;Panda&quot;">​</a></h1><p><code>Panda</code> 是后端的 <code>API</code> 和 前端的 <code>webUI</code> 结合到一起的一个项目. 将前端和后端的 <code>API</code> 放到一个项目中, 最后会生成一个文件, 这样便于上线后的管理, 更便于全栈开发. 虽然, 前后端在一起, 但从开的的角度还是分离的, 前端还是采用现在最流行的 <code>node.js</code> 架构, 使用 <code>React</code> 库进行开了. 后端还是正常提供对外的 <code>API</code> 接口.</p><h2 id="项目构建的过程" tabindex="-1">项目构建的过程 <a class="header-anchor" href="#项目构建的过程" aria-label="Permalink to &quot;项目构建的过程&quot;">​</a></h2><h3 id="_1-创建项目" tabindex="-1">1. 创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1. 创建项目&quot;">​</a></h3><h3 id="_2-实现命令行" tabindex="-1">2. 实现命令行 <a class="header-anchor" href="#_2-实现命令行" aria-label="Permalink to &quot;2. 实现命令行&quot;">​</a></h3><ol><li><p>从命令传配置文件的名子</p></li><li><p>读取配置文件的内容</p></li></ol><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><p><a href="https://github.com/urfave/cli/" target="_blank" rel="noreferrer">urfave/cli 源码</a></p><p><a href="https://cli.urfave.org" target="_blank" rel="noreferrer">cli.urfave.org 官方网站</a></p><h3 id="_3-实现-api" tabindex="-1">3. 实现 API <a class="header-anchor" href="#_3-实现-api" aria-label="Permalink to &quot;3. 实现 API&quot;">​</a></h3><ol><li>实现 API 请求, 并返回数据. (返回写死的数据, 因为这块没有与数据库做连接, 下章将会做数据库的链接)</li><li>封装返回值的数据格式.</li></ol><h3 id="_4-连接数据库" tabindex="-1">4. 连接数据库 <a class="header-anchor" href="#_4-连接数据库" aria-label="Permalink to &quot;4. 连接数据库&quot;">​</a></h3><ol><li>通过读取配置文件中的数据库信息, 对数据进行连接操作.</li><li>实现对数据库中的表, 读写, 更新和删除操作.</li></ol><h3 id="_5-其它" tabindex="-1">5. 其它 <a class="header-anchor" href="#_5-其它" aria-label="Permalink to &quot;5. 其它&quot;">​</a></h3><ol><li>需要用到的库和对数据封装.</li></ol><h3 id="_6-连接缓存数据-优化" tabindex="-1">6. 连接缓存数据 (优化) <a class="header-anchor" href="#_6-连接缓存数据-优化" aria-label="Permalink to &quot;6. 连接缓存数据 (优化)&quot;">​</a></h3><ol><li>连接 Redis</li><li>实现对 Redis 的存储</li></ol><h2 id="项目中的业务实现" tabindex="-1">项目中的业务实现 <a class="header-anchor" href="#项目中的业务实现" aria-label="Permalink to &quot;项目中的业务实现&quot;">​</a></h2><h3 id="数据库表的说明" tabindex="-1">数据库表的说明 <a class="header-anchor" href="#数据库表的说明" aria-label="Permalink to &quot;数据库表的说明&quot;">​</a></h3><p>项目中所有用的到的数据库表中的字段详细说明.</p><h4 id="数据主表" tabindex="-1">数据主表 <a class="header-anchor" href="#数据主表" aria-label="Permalink to &quot;数据主表&quot;">​</a></h4><table><thead><tr><th>变量名称</th><th>数据库类型</th><th>是否为必填值</th><th>key</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>true</td><td>PRI</td><td>1</td><td>编号</td></tr><tr><td>title</td><td>string</td><td>true</td><td></td><td>&#39;&#39;</td><td>标题</td></tr><tr><td>description</td><td>string</td><td>true</td><td></td><td>&#39;&#39;</td><td>内容简介</td></tr><tr><td>imgurl</td><td>string</td><td>false</td><td></td><td>&#39;&#39;</td><td>封面图像</td></tr><tr><td>author</td><td>string</td><td>false</td><td></td><td>&#39;&#39;</td><td>作者</td></tr><tr><td>github</td><td>string</td><td>false</td><td></td><td>&#39;&#39;</td><td>项目在github的地址</td></tr><tr><td>website</td><td>string</td><td>false</td><td></td><td>&#39;&#39;</td><td>项目的官方网站网址</td></tr><tr><td>raing</td><td>float</td><td>false</td><td></td><td>0</td><td>评价打分 0 - 10 保留1位小数. 默认值为0, 当0时, 前端可以不显示</td></tr><tr><td>updatetime</td><td>datatime</td><td></td><td></td><td></td><td>更新时间</td></tr><tr><td>createtime</td><td>datatime</td><td></td><td></td><td></td><td>创建时间</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="实现登录" tabindex="-1">实现登录 <a class="header-anchor" href="#实现登录" aria-label="Permalink to &quot;实现登录&quot;">​</a></h3>',23),o=[i];function l(h,n,c,s,u,_){return d(),a("div",null,o)}const f=t(r,[["render",l]]);export{p as __pageData,f as default};
