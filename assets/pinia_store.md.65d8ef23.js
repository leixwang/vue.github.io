import{_ as s,o as n,c as a,U as p}from"./chunks/framework.92bf3306.js";const b=JSON.parse('{"title":"Store 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"pinia/store.md","filePath":"pinia/store.md","lastUpdated":1689738962000}'),e={name:"pinia/store.md"},l=p(`<h1 id="store-介绍" tabindex="-1"><code>Store</code> 介绍 <a class="header-anchor" href="#store-介绍" aria-label="Permalink to &quot;\`Store\` 介绍&quot;">​</a></h1><p><code>Store</code>就是保存状态和业务逻辑的实体, 它没有绑定到组件树. 简单的说, 它是承载全局状态. 它就像一个总是存在的组件, 每个组件都可以读取和写入. 它有三个核心概念, <code>state</code>, <code>getters</code>和<code>actions</code>.</p><h2 id="store的应用场景" tabindex="-1"><code>Store</code>的应用场景 <a class="header-anchor" href="#store的应用场景" aria-label="Permalink to &quot;\`Store\`的应用场景&quot;">​</a></h2><p><code>Store</code>应该包含可以在整个应用程序中访问的数据。这包括在很多地方使用的数据，例如在导航栏中显示的用户信息，以及需要通过页面保存的数据，例如非常复杂的多步骤表单。</p><p>另一方面，你应该避免在<code>store</code>中包含可能托管在组件中的本地数据，例如，页面本地元素的可见性。</p><p>并不是所有的应用程序都需要访问全局状态，但是如果您需要，<code>Pinia</code>将使您的工作更轻松。</p><h2 id="定义store" tabindex="-1">定义<code>Store</code> <a class="header-anchor" href="#定义store" aria-label="Permalink to &quot;定义\`Store\`&quot;">​</a></h2><p>首先, 需要在<code>src</code>目录下, 创建一个目录, 其名为<code>stores</code>, 用来存放<code>Store</code>文件, 并在这个目录下创建一个文件. 名为<code>user.js</code>, 用来存放用户信息的<code>Store</code>. <code>Store</code> 是使用 <code>defineStore()</code> 定义的，并且它需要一个唯一名称，作为第一个参数传递：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code-dark"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineStore } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pinia&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 最好使用 use + 功能名 + Store 来命名, 这样对于便于后续的开发和维护 </span></span>
<span class="line"><span style="color:#6A737D;">// useUserStore </span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">useUserStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 第一个参数是应用程序中 store 的唯一 id</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// other options...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineStore } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pinia&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 最好使用 use + 功能名 + Store 来命名, 这样对于便于后续的开发和维护 </span></span>
<span class="line"><span style="color:#6A737D;">// useUserStore </span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">useUserStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 第一个参数是应用程序中 store 的唯一 id</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// other options...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>第一个参数的 <code>id</code>，是必要的，<code>Pinia</code> 使用它来将 <code>store</code> 连接到 <code>devtools</code>。 将返回的函数命名为 <code>use...</code> 是跨可组合项的约定，以使其符合你的使用习惯。</p></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code-dark"><code><span class="line"><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		lastName: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		age:</span></span>
<span class="line"><span style="color:#24292E;">  }),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getters</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">state</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> state.name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> state.lastName,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">actions</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.counter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		lastName: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		age:</span></span>
<span class="line"><span style="color:#24292E;">  }),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getters</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">state</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> state.name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> state.lastName,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">actions</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.counter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,11),o=[l];function t(c,r,i,y,d,E){return n(),a("div",null,o)}const m=s(e,[["render",t]]);export{b as __pageData,m as default};
